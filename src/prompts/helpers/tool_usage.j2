### Tool Usage Guide

Your team has access to a suite of tools to perform your tasks. You must use the correct tool for the job.

--- 

### For All Agents: General Purpose Tools

*   **`execute_python(code: str)`**: This is your primary tool for any kind of data analysis, exploration, or validation. It runs Python code in a sandboxed, stateless environment with access to the database and a set of powerful helper functions.

    **ALL data analysis actions you take MUST be performed by calling `execute_python` with the appropriate Python code.**

    **Injected Helpers available inside `execute_python`:**
    *   **`conn`**: A DuckDB connection object to the main database. Use this for any SQL queries.
    *   **`save_plot(filename: str)`**: Saves the current `matplotlib.pyplot` figure to the run's output directory. **You must call this to save any visualization.**
    *   **`get_table_sample(table_name: str, n_samples: int = 5) -> str`**: Returns a sample of a table.
    *   **`add_insight_to_report(...)`**: (Discovery Team) Saves a structured insight.
    *   **`add_to_central_memory(...)`**: (All Teams) Adds a note to the shared memory.

    **Critical Guidance:**
    - **Stateless Execution:** Every `execute_python` call is completely independent. You MUST reload or redefine all data at the start of each code block.
    - **Plotting Best Practices:** Always plot the full data distribution unless there is a strong analytical reason to subsample. Do not hide important data.

*   **`vision_tool(image_path: str, prompt: str)`**: Use this to analyze any plots or images you generate. You can use it to interpret a plot and generate a detailed analysis for an insight.

--- 

### For the Strategy Team: Feature Design & Validation

Your workflow is contract-driven. Follow these roles strictly.

*   **`save_candidate_features(candidate_features_data: List[Dict])`**
    *   **Who uses it:** `FeatureEngineer` ONLY.
    *   **What it does:** Saves the list of `CandidateFeature` contracts you have designed. This is the primary output of the `FeatureEngineer`.
    *   **When to use it:** After you have analyzed the incoming hypotheses and designed a set of feature contracts to address them.
    *   **Example Call (as your final response):**
        ```json
        {
          "tool_name": "save_candidate_features",
          "parameters": {
            "candidate_features_data": [
              {
                "name": "average_rating_per_reader_session",
                "description": "Calculates the average rating a user gives within a defined engagement session.",
                "dependencies": ["curated_reviews.user_id", "curated_reviews.rating"],
                "parameters": {"session_window_hours": 24}
              }
            ]
          }
        }
        ```

*   **`execute_python(code: str)`**
    *   **Who uses it:** `StrategistAgent` and `EngineerAgent`.
    *   **What it does:** Allows you to validate the `CandidateFeature` contracts proposed by the `FeatureEngineer`. You can write Python and SQL (via the `conn` object) to check if the dependencies exist, if the logic is sound, and if the feature is technically feasible.
    *   **When to use it:** After the `FeatureEngineer` has saved a set of candidate features, use this tool to perform your technical and business validation.

--- 

### For the Discovery Team: Insight & Hypothesis Generation

*   **`add_insight_to_report(title: str, finding: str, ...)`**: Call this tool to save a structured insight you have discovered. This is critical for building the final report.
*   **`finalize_hypotheses(hypotheses: List[Dict])`**: The `HypothesisAgent` or `EngineerAgent` calls this tool at the end of the discovery loop to save the final, vetted hypotheses. 