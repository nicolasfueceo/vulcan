"""
System prompts and agent definitions for the Hypothesis & Strategy Team.
This team is responsible for refining insights into concrete hypotheses.
"""

from typing import Dict

import autogen

from src.utils.prompt_utils import load_prompt

# --- Agent Prompts ---

BASE_STRATEGY_PROMPT = """You are an expert strategist. Your goal is to refine raw data insights into well-defined, testable hypotheses. You must work with your team to critique and improve the hypotheses.

**Error Handling:**
If a tool call fails, do not simply repeat it. Analyze the error message, identify the root cause (e.g., incorrect query, non-existent view name), and formulate a corrected plan. The database schema is available via `get_db_schema`.
"""

HYPOTHESIS_AGENT_PROMPT = (
    BASE_STRATEGY_PROMPT
    + """
You are the HypothesisAgent. Your specific role is to take the initial insight report and generate a list of initial hypotheses.
- Use the `get_db_schema` tool if you need to understand the tables mentioned in the insights.
- You can use `create_sql_view` or `execute_python_with_db_connection` to re-examine or re-calculate things from the report.
- Present your hypotheses clearly to the team for critique.
"""
)

STRATEGIST_AGENT_PROMPT = (
    BASE_STRATEGY_PROMPT
    + """
You are the StrategistAgent. Your role is to critique the hypotheses generated by the HypothesisAgent from a strategic perspective.
- Is the hypothesis valuable? Does it align with the goal of improving recommendations?
- Is it a novel idea or just a restatement of the obvious?
- Provide clear, actionable feedback to improve the hypotheses.
"""
)

ENGINEER_AGENT_PROMPT = (
    BASE_STRATEGY_PROMPT
    + """
You are the EngineerAgent. Your role is to critique the hypotheses from a technical feasibility perspective.
- Can this hypothesis be tested with the available data?
- What features would need to be engineered?
- Are there any obvious technical flaws in the proposed hypothesis?
- After the team has vetted the hypotheses, you are responsible for calling the `finalize_hypotheses` tool with the final list.
"""
)

# --- Agent Creation ---


def get_hypothesis_agents(
    llm_config: Dict, insights_report: str
) -> Dict[str, autogen.ConversableAgent]:
    """
    Initializes and returns the agents for the hypothesis and strategy loop.
    """
    hypothesis_prompt = load_prompt(
        "agents/strategy_team/hypothesis_agent.j2", insights_report=insights_report
    )
    strategist_prompt = load_prompt("agents/strategy_team/strategist_agent.j2")
    engineer_prompt = load_prompt("agents/strategy_team/engineer_agent.j2")

    agent_defs = [
        ("HypothesisAgent", hypothesis_prompt),
        ("StrategistAgent", strategist_prompt),
        ("EngineerAgent", engineer_prompt),
    ]

    agents = {
        name: autogen.AssistantAgent(
            name=name, system_message=prompt, llm_config=llm_config
        )
        for name, prompt in agent_defs
    }

    user_proxy = autogen.UserProxyAgent(
        name="UserProxy_Hypothesis",
        human_input_mode="NEVER",
        max_consecutive_auto_reply=10,
        is_termination_msg=lambda x: "SUCCESS" in x.get("content", ""),
        code_execution_config={"use_docker": False},
    )

    agents["user_proxy"] = user_proxy
    return agents
