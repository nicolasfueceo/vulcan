{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VULCAN","text":"<p>VULCAN is an autonomous multi-agent system for strategic feature engineering in recommender systems. It simulates a team of AI specialists (e.g., DataRepresenter, QuantitativeAnalyst, HypothesisAgent) who collaborate in structured group chats to discover, design, and validate new features for a book recommendation engine.</p>"},{"location":"#core-hypothesis","title":"Core Hypothesis","text":"<p>By orchestrating specialized agents in a collaborative, self-correcting loop, VULCAN can autonomously generate, optimize, and validate novel features that improve downstream recommender performance.</p>"},{"location":"#what-this-documentation-covers","title":"What This Documentation Covers","text":"<ul> <li>System architecture and pipeline phases</li> <li>Agent manuals for Discovery, Strategy, and Downstream teams</li> <li>Data schema for the curated DuckDB database</li> <li>Setup and usage instructions</li> </ul> <p>Navigate using the sidebar to get started!</p>"},{"location":"architecture/","title":"System Architecture","text":"<p>VULCAN is a multi-phase pipeline for autonomous feature engineering, composed of specialized agents collaborating in structured group chats. The pipeline phases are:</p> <ol> <li>Insight (Discovery): Agents perform EDA, create SQL views, and surface novel patterns.</li> <li>Strategy: Agents propose, evaluate, and refine candidate features.</li> <li>Generation/Realization: Features are implemented in Python and validated.</li> <li>Optimization: Features are tuned using bilevel optimization (Optuna).</li> <li>Reflection: The system analyzes past runs to guide future iterations.</li> </ol>"},{"location":"architecture/#central-orchestration","title":"Central Orchestration","text":"<ul> <li>orchestrator.py: Coordinates all phases, manages agent group chats, and maintains the <code>SessionState</code>.</li> <li>SessionState: Tracks all run artifacts, agent outputs, and shared memory.</li> </ul>"},{"location":"architecture/#pipeline-mindmap-mermaid","title":"Pipeline Mindmap (Mermaid)","text":"<pre><code>mindmap\n  root((VULCAN Pipeline))\n    Insight\n      DataRepresenter\n      QuantitativeAnalyst\n      PatternSeeker\n    Strategy\n      FeatureAuditor\n      OptimizationAgent\n      ReflectionAgent\n    Generation\n      FeatureRealizationAgent\n    Optimization\n      Optuna\n    Reflection\n      ReflectionAgent\n</code></pre>"},{"location":"architecture/#key-modules","title":"Key Modules","text":"<ul> <li><code>src/agents/</code> \u2014 Agent definitions</li> <li><code>src/orchestration/</code> \u2014 Orchestration logic for each phase</li> <li><code>src/utils/session_state.py</code> \u2014 Run/session state management</li> <li><code>src/schemas/models.py</code> \u2014 Data models</li> </ul>"},{"location":"data_schema/","title":"Data Schema","text":"<p>VULCAN uses a DuckDB database with the following tables:</p>"},{"location":"data_schema/#curated_books","title":"curated_books","text":"Column Type Description book_id INTEGER Unique identifier for each book title TEXT Title of the book author TEXT Author name(s) genre TEXT Genre/category publication_year INTEGER Year the book was published avg_rating FLOAT Average rating num_ratings INTEGER Number of ratings num_reviews INTEGER Number of reviews"},{"location":"data_schema/#curated_reviews","title":"curated_reviews","text":"Column Type Description review_id INTEGER Unique identifier for each review book_id INTEGER Foreign key to curated_books.book_id user_id INTEGER Foreign key to users.user_id rating FLOAT User's rating for the book review_text TEXT The review content review_date DATE Date of the review"},{"location":"data_schema/#users","title":"users","text":"Column Type Description user_id INTEGER Unique user identifier name TEXT User's display name"},{"location":"setup/","title":"Setup &amp; Usage","text":""},{"location":"setup/#1-installation","title":"1. Installation","text":"<ol> <li>Clone the repository:    <pre><code>git clone https://github.com/your_username/your_repo_name.git\ncd your_repo_name\n</code></pre></li> <li>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"setup/#2-running-vulcan","title":"2. Running VULCAN","text":"<ul> <li>To start a new feature engineering run, use the main orchestration script:   <pre><code>python src/orchestrator.py\n</code></pre></li> <li>Outputs (insights, features, plots) are saved in the <code>runtime/runs/</code> and <code>report/</code> directories.</li> </ul>"},{"location":"setup/#3-building-the-documentation","title":"3. Building the Documentation","text":"<ul> <li>To view the documentation locally:   <pre><code>pip install mkdocs-material\nmkdocs serve\n</code></pre>   Then open http://127.0.0.1:8000</li> </ul>"},{"location":"setup/#4-directory-structure","title":"4. Directory Structure","text":"<ul> <li><code>src/</code>: Source code for agents, orchestration, and utilities</li> <li><code>runtime/</code>: Run outputs and logs</li> <li><code>report/</code>: Aggregated reports and plots</li> <li><code>docs/</code>: Documentation sources for MkDocs</li> </ul>"},{"location":"agents/discovery_team/","title":"Discovery Team","text":""},{"location":"agents/discovery_team/#workflow-overview","title":"Workflow Overview","text":"<p>This team operates as a collaborative GroupChat managed by the <code>SmartGroupChatManager</code>. The process begins with the <code>DataRepresenter</code> creating initial views. The <code>QuantitativeAnalyst</code> and <code>PatternSeeker</code> then work in parallel to analyze the data from different perspectives, surfacing both quantitative and qualitative insights. All findings are added to the Insight Report for downstream agents.</p>"},{"location":"agents/downstream_agents/","title":"Downstream Agents","text":""},{"location":"agents/downstream_agents/#workflow-overview","title":"Workflow Overview","text":"<p>Downstream Agents receive optimized feature definitions from the Strategy Team. The <code>FeatureRealizationAgent</code> implements features in code, and the <code>EvaluationAgent</code> benchmarks their impact, producing results for both human review and feedback to upstream agents.</p>"},{"location":"agents/strategy_team/","title":"Strategy Team Manual","text":"<p>The Strategy Team is responsible for transforming raw insights into actionable, high-quality features through a rigorous, multi-stage process. This team consists of three specialized agents, each with distinct roles and toolsets. The workflow is collaborative, iterative, and designed for both robustness and extensibility.</p>"},{"location":"agents/strategy_team/#team-composition-and-roles","title":"Team Composition and Roles","text":"Agent Name Role Primary Tools FeatureAuditor Audits candidate features for correctness, novelty, and impact <code>run_sql_query</code>, <code>audit_feature</code>, <code>add_audit_note</code> OptimizationAgent Tunes feature parameters using bilevel optimization (Optuna) <code>run_optimization</code>, <code>suggest_hyperparameters</code> ReflectionAgent Analyzes past runs and informs future strategies (meta-learning) <code>analyze_run_history</code>, <code>suggest_strategy</code>"},{"location":"agents/strategy_team/#detailed-step-by-step-workflow","title":"Detailed Step-by-Step Workflow","text":"<pre><code>flowchart TD\n    A[Receive Candidate Features &amp; Insights] --&gt; B[FeatureAuditor: Audit Features]\n    B --&gt; C[OptimizationAgent: Parameter Tuning]\n    C --&gt; D[ReflectionAgent: Meta-Analysis]\n    D --&gt;|Suggests Next Steps| A\n    C --&gt;|Outputs Optimized Features| E[Downstream Agents]\n</code></pre>"},{"location":"agents/strategy_team/#1-receive-candidate-features-insights","title":"1. Receive Candidate Features &amp; Insights","text":"<ul> <li>Input: Structured insights and candidate features from the Discovery Team.</li> <li>Format: List of feature specifications, each with metadata (source insight, rationale, SQL/Python implementation).</li> </ul>"},{"location":"agents/strategy_team/#2-featureauditor-audit-features","title":"2. FeatureAuditor: Audit Features","text":"<ul> <li>Purpose: Assess the quality, novelty, and informativeness of each candidate feature.</li> <li>Process:<ol> <li>Compute Summary Statistics: Uses <code>compute_summary_stats</code> to analyze feature distributions.</li> <li>Generate Plots: Calls <code>create_plot</code> to visualize feature distributions (e.g., histograms).</li> <li>Vision Analysis: Invokes a vision model on generated plots for qualitative assessment.</li> <li>Informativeness Filter: Flags features as informative/non-informative based on data coverage and variance.</li> <li>Audit Notes: Uses <code>add_audit_note</code> to document findings and recommendations.</li> </ol> </li> <li>Output: Structured audit report for each feature (including stats, plots, vision summary, and informativeness flag).</li> </ul>"},{"location":"agents/strategy_team/#example-table-feature-audit-output","title":"Example Table: Feature Audit Output","text":"Feature Stats Summary Plot Path Vision Summary Informative <code>feat_A</code> ... <code>plots/feat_A.png</code> \"Distinct bimodal...\" Yes"},{"location":"agents/strategy_team/#3-optimizationagent-parameter-tuning","title":"3. OptimizationAgent: Parameter Tuning","text":"<ul> <li>Purpose: Tune hyperparameters of candidate features to maximize downstream model performance.</li> <li>Process:<ol> <li>Setup Optimization: Loads feature configs and initializes Optuna study.</li> <li>Objective Function: Defines a scoring function (e.g., AUC, RMSE) using k-fold cross-validation.</li> <li>Parameter Sampling: Uses <code>suggest_hyperparameters</code> to sample feature parameters per trial.</li> <li>Model Training: Trains LightFM (or other recommender) on each fold.</li> <li>Early Stopping &amp; Pruning: Implements Optuna pruning for efficiency.</li> <li>Logging &amp; Visualization: Logs results to TensorBoard and saves optimization logs.</li> <li>Feature Importances: Computes parameter importances post-optimization.</li> </ol> </li> <li>Output:<ul> <li>Best parameter set for each feature</li> <li>Optimization logs and trial results</li> <li>Feature importance scores</li> </ul> </li> </ul>"},{"location":"agents/strategy_team/#example-table-optimization-output","title":"Example Table: Optimization Output","text":"Feature Best Params Best Score Importance <code>feat_A</code> <code>{bin=10}</code> 0.812 0.45"},{"location":"agents/strategy_team/#4-reflectionagent-meta-analysis-strategy","title":"4. ReflectionAgent: Meta-Analysis &amp; Strategy","text":"<ul> <li>Purpose: Analyze the results of the current pipeline iteration and recommend next steps.</li> <li>Process:<ol> <li>Gather Artifacts: Loads insights, hypotheses, audit reports, and optimization results from <code>SessionState</code>.</li> <li>Prompt Engineering: Uses a structured prompt to instruct the LLM on what to reflect on.</li> <li>LLM Reflection: Runs a chat session (via autogen) to:<ul> <li>Evaluate the quality and completeness of current features</li> <li>Identify gaps or areas for further exploration</li> <li>Decide whether to continue, stop, or pivot</li> </ul> </li> <li>Summary Logging: Writes results to TensorBoard and logs detailed reasoning.</li> </ol> </li> <li>Output:<ul> <li><code>should_continue</code> (bool)</li> <li><code>reasoning</code> (str)</li> <li><code>next_steps</code> (list)</li> </ul> </li> </ul>"},{"location":"agents/strategy_team/#example-table-reflection-output","title":"Example Table: Reflection Output","text":"Should Continue Reasoning Next Steps True \"Feature set is promising...\" [\"Audit more genre features\"]"},{"location":"agents/strategy_team/#tools-access-for-each-agent","title":"Tools &amp; Access for Each Agent","text":""},{"location":"agents/strategy_team/#featureauditor","title":"FeatureAuditor","text":"<ul> <li>run_sql_query: Executes SQL queries on DuckDB to fetch feature data.</li> <li>audit_feature: Runs the full audit pipeline (stats, plot, vision, informativeness).</li> <li>add_audit_note: Appends structured notes to the audit report.</li> </ul>"},{"location":"agents/strategy_team/#optimizationagent","title":"OptimizationAgent","text":"<ul> <li>run_optimization: Launches Optuna-based parameter search, logs all trials.</li> <li>suggest_hyperparameters: Samples and proposes new parameter sets per trial.</li> </ul>"},{"location":"agents/strategy_team/#reflectionagent","title":"ReflectionAgent","text":"<ul> <li>analyze_run_history: Loads all artifacts from <code>SessionState</code> for meta-analysis.</li> <li>suggest_strategy: Uses LLM to propose next steps for the pipeline.</li> </ul>"},{"location":"agents/strategy_team/#interaction-diagram-detailed","title":"Interaction Diagram (Detailed)","text":"<pre><code>sequenceDiagram\n    participant DT as Discovery Team\n    participant FA as FeatureAuditor\n    participant OA as OptimizationAgent\n    participant RA as ReflectionAgent\n    participant DA as Downstream Agents\n    DT-&gt;&gt;FA: Send candidate features &amp; insights\n    FA-&gt;&gt;FA: Audit features (stats, plot, vision)\n    FA-&gt;&gt;OA: Send audit report &amp; informative features\n    OA-&gt;&gt;OA: Optimize parameters (Optuna)\n    OA-&gt;&gt;RA: Send optimization results\n    RA-&gt;&gt;RA: Reflect, analyze, suggest next steps\n    RA--&gt;&gt;FA: (If needed) Request more audits or new features\n    OA-&gt;&gt;DA: Send optimized features for implementation\n</code></pre>"},{"location":"agents/strategy_team/#example-end-to-end-flow","title":"Example End-to-End Flow","text":"<ol> <li>Discovery Team generates a new feature: <code>genre_popularity</code>.</li> <li>FeatureAuditor computes stats, generates a histogram, and runs vision analysis.</li> <li>If <code>genre_popularity</code> is informative, OptimizationAgent tunes its bin size and normalization method.</li> <li>ReflectionAgent reviews the audit and optimization results, recommends further tuning or exploration if needed.</li> <li>Optimized, validated features are passed to Downstream Agents for realization and evaluation.</li> </ol> <p>Note: All steps are logged and tracked in the <code>SessionState</code> for full reproducibility and agentic traceability.</p>"}]}